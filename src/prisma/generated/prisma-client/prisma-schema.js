module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateConnection {
  count: Int!
}

type AggregateCoordinates {
  count: Int!
}

type AggregateProfileField {
  count: Int!
}

type AggregateQRCode {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Connection {
  id: ID!
  sender: User
  receiver: User
  status: ConnectionStatus
  coords: Coordinates
}

type ConnectionConnection {
  pageInfo: PageInfo!
  edges: [ConnectionEdge]!
  aggregate: AggregateConnection!
}

input ConnectionCreateInput {
  id: ID
  sender: UserCreateOneWithoutSentConnectionsInput
  receiver: UserCreateOneWithoutReceivedConnectionsInput
  status: ConnectionStatus
  coords: CoordinatesCreateOneInput
}

input ConnectionCreateManyWithoutReceiverInput {
  create: [ConnectionCreateWithoutReceiverInput!]
  connect: [ConnectionWhereUniqueInput!]
}

input ConnectionCreateManyWithoutSenderInput {
  create: [ConnectionCreateWithoutSenderInput!]
  connect: [ConnectionWhereUniqueInput!]
}

input ConnectionCreateWithoutReceiverInput {
  id: ID
  sender: UserCreateOneWithoutSentConnectionsInput
  status: ConnectionStatus
  coords: CoordinatesCreateOneInput
}

input ConnectionCreateWithoutSenderInput {
  id: ID
  receiver: UserCreateOneWithoutReceivedConnectionsInput
  status: ConnectionStatus
  coords: CoordinatesCreateOneInput
}

type ConnectionEdge {
  node: Connection!
  cursor: String!
}

enum ConnectionOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
}

type ConnectionPreviousValues {
  id: ID!
  status: ConnectionStatus
}

input ConnectionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: ConnectionStatus
  status_not: ConnectionStatus
  status_in: [ConnectionStatus!]
  status_not_in: [ConnectionStatus!]
  AND: [ConnectionScalarWhereInput!]
  OR: [ConnectionScalarWhereInput!]
  NOT: [ConnectionScalarWhereInput!]
}

enum ConnectionStatus {
  PENDING
  CONNECTED
  BLOCKED
}

type ConnectionSubscriptionPayload {
  mutation: MutationType!
  node: Connection
  updatedFields: [String!]
  previousValues: ConnectionPreviousValues
}

input ConnectionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConnectionWhereInput
  AND: [ConnectionSubscriptionWhereInput!]
  OR: [ConnectionSubscriptionWhereInput!]
  NOT: [ConnectionSubscriptionWhereInput!]
}

input ConnectionUpdateInput {
  sender: UserUpdateOneWithoutSentConnectionsInput
  receiver: UserUpdateOneWithoutReceivedConnectionsInput
  status: ConnectionStatus
  coords: CoordinatesUpdateOneInput
}

input ConnectionUpdateManyDataInput {
  status: ConnectionStatus
}

input ConnectionUpdateManyMutationInput {
  status: ConnectionStatus
}

input ConnectionUpdateManyWithoutReceiverInput {
  create: [ConnectionCreateWithoutReceiverInput!]
  delete: [ConnectionWhereUniqueInput!]
  connect: [ConnectionWhereUniqueInput!]
  set: [ConnectionWhereUniqueInput!]
  disconnect: [ConnectionWhereUniqueInput!]
  update: [ConnectionUpdateWithWhereUniqueWithoutReceiverInput!]
  upsert: [ConnectionUpsertWithWhereUniqueWithoutReceiverInput!]
  deleteMany: [ConnectionScalarWhereInput!]
  updateMany: [ConnectionUpdateManyWithWhereNestedInput!]
}

input ConnectionUpdateManyWithoutSenderInput {
  create: [ConnectionCreateWithoutSenderInput!]
  delete: [ConnectionWhereUniqueInput!]
  connect: [ConnectionWhereUniqueInput!]
  set: [ConnectionWhereUniqueInput!]
  disconnect: [ConnectionWhereUniqueInput!]
  update: [ConnectionUpdateWithWhereUniqueWithoutSenderInput!]
  upsert: [ConnectionUpsertWithWhereUniqueWithoutSenderInput!]
  deleteMany: [ConnectionScalarWhereInput!]
  updateMany: [ConnectionUpdateManyWithWhereNestedInput!]
}

input ConnectionUpdateManyWithWhereNestedInput {
  where: ConnectionScalarWhereInput!
  data: ConnectionUpdateManyDataInput!
}

input ConnectionUpdateWithoutReceiverDataInput {
  sender: UserUpdateOneWithoutSentConnectionsInput
  status: ConnectionStatus
  coords: CoordinatesUpdateOneInput
}

input ConnectionUpdateWithoutSenderDataInput {
  receiver: UserUpdateOneWithoutReceivedConnectionsInput
  status: ConnectionStatus
  coords: CoordinatesUpdateOneInput
}

input ConnectionUpdateWithWhereUniqueWithoutReceiverInput {
  where: ConnectionWhereUniqueInput!
  data: ConnectionUpdateWithoutReceiverDataInput!
}

input ConnectionUpdateWithWhereUniqueWithoutSenderInput {
  where: ConnectionWhereUniqueInput!
  data: ConnectionUpdateWithoutSenderDataInput!
}

input ConnectionUpsertWithWhereUniqueWithoutReceiverInput {
  where: ConnectionWhereUniqueInput!
  update: ConnectionUpdateWithoutReceiverDataInput!
  create: ConnectionCreateWithoutReceiverInput!
}

input ConnectionUpsertWithWhereUniqueWithoutSenderInput {
  where: ConnectionWhereUniqueInput!
  update: ConnectionUpdateWithoutSenderDataInput!
  create: ConnectionCreateWithoutSenderInput!
}

input ConnectionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sender: UserWhereInput
  receiver: UserWhereInput
  status: ConnectionStatus
  status_not: ConnectionStatus
  status_in: [ConnectionStatus!]
  status_not_in: [ConnectionStatus!]
  coords: CoordinatesWhereInput
  AND: [ConnectionWhereInput!]
  OR: [ConnectionWhereInput!]
  NOT: [ConnectionWhereInput!]
}

input ConnectionWhereUniqueInput {
  id: ID
}

type Coordinates {
  id: ID!
  latitude: Float
  longitude: Float
}

type CoordinatesConnection {
  pageInfo: PageInfo!
  edges: [CoordinatesEdge]!
  aggregate: AggregateCoordinates!
}

input CoordinatesCreateInput {
  id: ID
  latitude: Float
  longitude: Float
}

input CoordinatesCreateOneInput {
  create: CoordinatesCreateInput
  connect: CoordinatesWhereUniqueInput
}

type CoordinatesEdge {
  node: Coordinates!
  cursor: String!
}

enum CoordinatesOrderByInput {
  id_ASC
  id_DESC
  latitude_ASC
  latitude_DESC
  longitude_ASC
  longitude_DESC
}

type CoordinatesPreviousValues {
  id: ID!
  latitude: Float
  longitude: Float
}

type CoordinatesSubscriptionPayload {
  mutation: MutationType!
  node: Coordinates
  updatedFields: [String!]
  previousValues: CoordinatesPreviousValues
}

input CoordinatesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CoordinatesWhereInput
  AND: [CoordinatesSubscriptionWhereInput!]
  OR: [CoordinatesSubscriptionWhereInput!]
  NOT: [CoordinatesSubscriptionWhereInput!]
}

input CoordinatesUpdateDataInput {
  latitude: Float
  longitude: Float
}

input CoordinatesUpdateInput {
  latitude: Float
  longitude: Float
}

input CoordinatesUpdateManyMutationInput {
  latitude: Float
  longitude: Float
}

input CoordinatesUpdateOneInput {
  create: CoordinatesCreateInput
  update: CoordinatesUpdateDataInput
  upsert: CoordinatesUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CoordinatesWhereUniqueInput
}

input CoordinatesUpsertNestedInput {
  update: CoordinatesUpdateDataInput!
  create: CoordinatesCreateInput!
}

input CoordinatesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  latitude: Float
  latitude_not: Float
  latitude_in: [Float!]
  latitude_not_in: [Float!]
  latitude_lt: Float
  latitude_lte: Float
  latitude_gt: Float
  latitude_gte: Float
  longitude: Float
  longitude_not: Float
  longitude_in: [Float!]
  longitude_not_in: [Float!]
  longitude_lt: Float
  longitude_lte: Float
  longitude_gt: Float
  longitude_gte: Float
  AND: [CoordinatesWhereInput!]
  OR: [CoordinatesWhereInput!]
  NOT: [CoordinatesWhereInput!]
}

input CoordinatesWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createConnection(data: ConnectionCreateInput!): Connection!
  updateConnection(data: ConnectionUpdateInput!, where: ConnectionWhereUniqueInput!): Connection
  updateManyConnections(data: ConnectionUpdateManyMutationInput!, where: ConnectionWhereInput): BatchPayload!
  upsertConnection(where: ConnectionWhereUniqueInput!, create: ConnectionCreateInput!, update: ConnectionUpdateInput!): Connection!
  deleteConnection(where: ConnectionWhereUniqueInput!): Connection
  deleteManyConnections(where: ConnectionWhereInput): BatchPayload!
  createCoordinates(data: CoordinatesCreateInput!): Coordinates!
  updateCoordinates(data: CoordinatesUpdateInput!, where: CoordinatesWhereUniqueInput!): Coordinates
  updateManyCoordinateses(data: CoordinatesUpdateManyMutationInput!, where: CoordinatesWhereInput): BatchPayload!
  upsertCoordinates(where: CoordinatesWhereUniqueInput!, create: CoordinatesCreateInput!, update: CoordinatesUpdateInput!): Coordinates!
  deleteCoordinates(where: CoordinatesWhereUniqueInput!): Coordinates
  deleteManyCoordinateses(where: CoordinatesWhereInput): BatchPayload!
  createProfileField(data: ProfileFieldCreateInput!): ProfileField!
  updateProfileField(data: ProfileFieldUpdateInput!, where: ProfileFieldWhereUniqueInput!): ProfileField
  updateManyProfileFields(data: ProfileFieldUpdateManyMutationInput!, where: ProfileFieldWhereInput): BatchPayload!
  upsertProfileField(where: ProfileFieldWhereUniqueInput!, create: ProfileFieldCreateInput!, update: ProfileFieldUpdateInput!): ProfileField!
  deleteProfileField(where: ProfileFieldWhereUniqueInput!): ProfileField
  deleteManyProfileFields(where: ProfileFieldWhereInput): BatchPayload!
  createQRCode(data: QRCodeCreateInput!): QRCode!
  updateQRCode(data: QRCodeUpdateInput!, where: QRCodeWhereUniqueInput!): QRCode
  updateManyQRCodes(data: QRCodeUpdateManyMutationInput!, where: QRCodeWhereInput): BatchPayload!
  upsertQRCode(where: QRCodeWhereUniqueInput!, create: QRCodeCreateInput!, update: QRCodeUpdateInput!): QRCode!
  deleteQRCode(where: QRCodeWhereUniqueInput!): QRCode
  deleteManyQRCodes(where: QRCodeWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ProfileField {
  id: ID!
  user: User!
  value: String!
  type: ProfileFieldType!
  privacy: ProfileFieldPrivacy!
  preferredContact: Boolean
}

type ProfileFieldConnection {
  pageInfo: PageInfo!
  edges: [ProfileFieldEdge]!
  aggregate: AggregateProfileField!
}

input ProfileFieldCreateInput {
  id: ID
  user: UserCreateOneWithoutProfileInput!
  value: String!
  type: ProfileFieldType!
  privacy: ProfileFieldPrivacy!
  preferredContact: Boolean
}

input ProfileFieldCreateManyWithoutUserInput {
  create: [ProfileFieldCreateWithoutUserInput!]
  connect: [ProfileFieldWhereUniqueInput!]
}

input ProfileFieldCreateWithoutUserInput {
  id: ID
  value: String!
  type: ProfileFieldType!
  privacy: ProfileFieldPrivacy!
  preferredContact: Boolean
}

type ProfileFieldEdge {
  node: ProfileField!
  cursor: String!
}

enum ProfileFieldOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
  type_ASC
  type_DESC
  privacy_ASC
  privacy_DESC
  preferredContact_ASC
  preferredContact_DESC
}

type ProfileFieldPreviousValues {
  id: ID!
  value: String!
  type: ProfileFieldType!
  privacy: ProfileFieldPrivacy!
  preferredContact: Boolean
}

enum ProfileFieldPrivacy {
  PUBLIC
  PRIVATE
  CONNECTED
}

input ProfileFieldScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  type: ProfileFieldType
  type_not: ProfileFieldType
  type_in: [ProfileFieldType!]
  type_not_in: [ProfileFieldType!]
  privacy: ProfileFieldPrivacy
  privacy_not: ProfileFieldPrivacy
  privacy_in: [ProfileFieldPrivacy!]
  privacy_not_in: [ProfileFieldPrivacy!]
  preferredContact: Boolean
  preferredContact_not: Boolean
  AND: [ProfileFieldScalarWhereInput!]
  OR: [ProfileFieldScalarWhereInput!]
  NOT: [ProfileFieldScalarWhereInput!]
}

type ProfileFieldSubscriptionPayload {
  mutation: MutationType!
  node: ProfileField
  updatedFields: [String!]
  previousValues: ProfileFieldPreviousValues
}

input ProfileFieldSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProfileFieldWhereInput
  AND: [ProfileFieldSubscriptionWhereInput!]
  OR: [ProfileFieldSubscriptionWhereInput!]
  NOT: [ProfileFieldSubscriptionWhereInput!]
}

enum ProfileFieldType {
  EMAIL
  PHONE
  SMS
  INSTAGRAM
  FACEBOOK
  LINKEDIN
  TWITTER
}

input ProfileFieldUpdateInput {
  user: UserUpdateOneRequiredWithoutProfileInput
  value: String
  type: ProfileFieldType
  privacy: ProfileFieldPrivacy
  preferredContact: Boolean
}

input ProfileFieldUpdateManyDataInput {
  value: String
  type: ProfileFieldType
  privacy: ProfileFieldPrivacy
  preferredContact: Boolean
}

input ProfileFieldUpdateManyMutationInput {
  value: String
  type: ProfileFieldType
  privacy: ProfileFieldPrivacy
  preferredContact: Boolean
}

input ProfileFieldUpdateManyWithoutUserInput {
  create: [ProfileFieldCreateWithoutUserInput!]
  delete: [ProfileFieldWhereUniqueInput!]
  connect: [ProfileFieldWhereUniqueInput!]
  set: [ProfileFieldWhereUniqueInput!]
  disconnect: [ProfileFieldWhereUniqueInput!]
  update: [ProfileFieldUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ProfileFieldUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ProfileFieldScalarWhereInput!]
  updateMany: [ProfileFieldUpdateManyWithWhereNestedInput!]
}

input ProfileFieldUpdateManyWithWhereNestedInput {
  where: ProfileFieldScalarWhereInput!
  data: ProfileFieldUpdateManyDataInput!
}

input ProfileFieldUpdateWithoutUserDataInput {
  value: String
  type: ProfileFieldType
  privacy: ProfileFieldPrivacy
  preferredContact: Boolean
}

input ProfileFieldUpdateWithWhereUniqueWithoutUserInput {
  where: ProfileFieldWhereUniqueInput!
  data: ProfileFieldUpdateWithoutUserDataInput!
}

input ProfileFieldUpsertWithWhereUniqueWithoutUserInput {
  where: ProfileFieldWhereUniqueInput!
  update: ProfileFieldUpdateWithoutUserDataInput!
  create: ProfileFieldCreateWithoutUserInput!
}

input ProfileFieldWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  type: ProfileFieldType
  type_not: ProfileFieldType
  type_in: [ProfileFieldType!]
  type_not_in: [ProfileFieldType!]
  privacy: ProfileFieldPrivacy
  privacy_not: ProfileFieldPrivacy
  privacy_in: [ProfileFieldPrivacy!]
  privacy_not_in: [ProfileFieldPrivacy!]
  preferredContact: Boolean
  preferredContact_not: Boolean
  AND: [ProfileFieldWhereInput!]
  OR: [ProfileFieldWhereInput!]
  NOT: [ProfileFieldWhereInput!]
}

input ProfileFieldWhereUniqueInput {
  id: ID
}

type QRCode {
  id: ID!
  label: String
  scans: Int
  user: User
}

type QRCodeConnection {
  pageInfo: PageInfo!
  edges: [QRCodeEdge]!
  aggregate: AggregateQRCode!
}

input QRCodeCreateInput {
  id: ID
  label: String
  scans: Int
  user: UserCreateOneWithoutQrcodesInput
}

input QRCodeCreateManyWithoutUserInput {
  create: [QRCodeCreateWithoutUserInput!]
  connect: [QRCodeWhereUniqueInput!]
}

input QRCodeCreateWithoutUserInput {
  id: ID
  label: String
  scans: Int
}

type QRCodeEdge {
  node: QRCode!
  cursor: String!
}

enum QRCodeOrderByInput {
  id_ASC
  id_DESC
  label_ASC
  label_DESC
  scans_ASC
  scans_DESC
}

type QRCodePreviousValues {
  id: ID!
  label: String
  scans: Int
}

input QRCodeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_lt: String
  label_lte: String
  label_gt: String
  label_gte: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  scans: Int
  scans_not: Int
  scans_in: [Int!]
  scans_not_in: [Int!]
  scans_lt: Int
  scans_lte: Int
  scans_gt: Int
  scans_gte: Int
  AND: [QRCodeScalarWhereInput!]
  OR: [QRCodeScalarWhereInput!]
  NOT: [QRCodeScalarWhereInput!]
}

type QRCodeSubscriptionPayload {
  mutation: MutationType!
  node: QRCode
  updatedFields: [String!]
  previousValues: QRCodePreviousValues
}

input QRCodeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QRCodeWhereInput
  AND: [QRCodeSubscriptionWhereInput!]
  OR: [QRCodeSubscriptionWhereInput!]
  NOT: [QRCodeSubscriptionWhereInput!]
}

input QRCodeUpdateInput {
  label: String
  scans: Int
  user: UserUpdateOneWithoutQrcodesInput
}

input QRCodeUpdateManyDataInput {
  label: String
  scans: Int
}

input QRCodeUpdateManyMutationInput {
  label: String
  scans: Int
}

input QRCodeUpdateManyWithoutUserInput {
  create: [QRCodeCreateWithoutUserInput!]
  delete: [QRCodeWhereUniqueInput!]
  connect: [QRCodeWhereUniqueInput!]
  set: [QRCodeWhereUniqueInput!]
  disconnect: [QRCodeWhereUniqueInput!]
  update: [QRCodeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [QRCodeUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [QRCodeScalarWhereInput!]
  updateMany: [QRCodeUpdateManyWithWhereNestedInput!]
}

input QRCodeUpdateManyWithWhereNestedInput {
  where: QRCodeScalarWhereInput!
  data: QRCodeUpdateManyDataInput!
}

input QRCodeUpdateWithoutUserDataInput {
  label: String
  scans: Int
}

input QRCodeUpdateWithWhereUniqueWithoutUserInput {
  where: QRCodeWhereUniqueInput!
  data: QRCodeUpdateWithoutUserDataInput!
}

input QRCodeUpsertWithWhereUniqueWithoutUserInput {
  where: QRCodeWhereUniqueInput!
  update: QRCodeUpdateWithoutUserDataInput!
  create: QRCodeCreateWithoutUserInput!
}

input QRCodeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_lt: String
  label_lte: String
  label_gt: String
  label_gte: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  scans: Int
  scans_not: Int
  scans_in: [Int!]
  scans_not_in: [Int!]
  scans_lt: Int
  scans_lte: Int
  scans_gt: Int
  scans_gte: Int
  user: UserWhereInput
  AND: [QRCodeWhereInput!]
  OR: [QRCodeWhereInput!]
  NOT: [QRCodeWhereInput!]
}

input QRCodeWhereUniqueInput {
  id: ID
}

type Query {
  connection(where: ConnectionWhereUniqueInput!): Connection
  connections(where: ConnectionWhereInput, orderBy: ConnectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Connection]!
  connectionsConnection(where: ConnectionWhereInput, orderBy: ConnectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConnectionConnection!
  coordinates(where: CoordinatesWhereUniqueInput!): Coordinates
  coordinateses(where: CoordinatesWhereInput, orderBy: CoordinatesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Coordinates]!
  coordinatesesConnection(where: CoordinatesWhereInput, orderBy: CoordinatesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CoordinatesConnection!
  profileField(where: ProfileFieldWhereUniqueInput!): ProfileField
  profileFields(where: ProfileFieldWhereInput, orderBy: ProfileFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProfileField]!
  profileFieldsConnection(where: ProfileFieldWhereInput, orderBy: ProfileFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileFieldConnection!
  qRCode(where: QRCodeWhereUniqueInput!): QRCode
  qRCodes(where: QRCodeWhereInput, orderBy: QRCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QRCode]!
  qRCodesConnection(where: QRCodeWhereInput, orderBy: QRCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QRCodeConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  connection(where: ConnectionSubscriptionWhereInput): ConnectionSubscriptionPayload
  coordinates(where: CoordinatesSubscriptionWhereInput): CoordinatesSubscriptionPayload
  profileField(where: ProfileFieldSubscriptionWhereInput): ProfileFieldSubscriptionPayload
  qRCode(where: QRCodeSubscriptionWhereInput): QRCodeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile(where: ProfileFieldWhereInput, orderBy: ProfileFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProfileField!]
  qrcodes(where: QRCodeWhereInput, orderBy: QRCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QRCode!]
  sentConnections(where: ConnectionWhereInput, orderBy: ConnectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Connection!]
  receivedConnections(where: ConnectionWhereInput, orderBy: ConnectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Connection!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldCreateManyWithoutUserInput
  qrcodes: QRCodeCreateManyWithoutUserInput
  sentConnections: ConnectionCreateManyWithoutSenderInput
  receivedConnections: ConnectionCreateManyWithoutReceiverInput
}

input UserCreateOneWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQrcodesInput {
  create: UserCreateWithoutQrcodesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReceivedConnectionsInput {
  create: UserCreateWithoutReceivedConnectionsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSentConnectionsInput {
  create: UserCreateWithoutSentConnectionsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProfileInput {
  id: ID
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  qrcodes: QRCodeCreateManyWithoutUserInput
  sentConnections: ConnectionCreateManyWithoutSenderInput
  receivedConnections: ConnectionCreateManyWithoutReceiverInput
}

input UserCreateWithoutQrcodesInput {
  id: ID
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldCreateManyWithoutUserInput
  sentConnections: ConnectionCreateManyWithoutSenderInput
  receivedConnections: ConnectionCreateManyWithoutReceiverInput
}

input UserCreateWithoutReceivedConnectionsInput {
  id: ID
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldCreateManyWithoutUserInput
  qrcodes: QRCodeCreateManyWithoutUserInput
  sentConnections: ConnectionCreateManyWithoutSenderInput
}

input UserCreateWithoutSentConnectionsInput {
  id: ID
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldCreateManyWithoutUserInput
  qrcodes: QRCodeCreateManyWithoutUserInput
  receivedConnections: ConnectionCreateManyWithoutReceiverInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  authId_ASC
  authId_DESC
  name_ASC
  name_DESC
  picture_ASC
  picture_DESC
  birthdate_ASC
  birthdate_DESC
  location_ASC
  location_DESC
  industry_ASC
  industry_DESC
  jobtitle_ASC
  jobtitle_DESC
  tagline_ASC
  tagline_DESC
  bio_ASC
  bio_DESC
}

type UserPreviousValues {
  id: ID!
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  authId: String
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldUpdateManyWithoutUserInput
  qrcodes: QRCodeUpdateManyWithoutUserInput
  sentConnections: ConnectionUpdateManyWithoutSenderInput
  receivedConnections: ConnectionUpdateManyWithoutReceiverInput
}

input UserUpdateManyMutationInput {
  authId: String
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
}

input UserUpdateOneRequiredWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  update: UserUpdateWithoutProfileDataInput
  upsert: UserUpsertWithoutProfileInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutQrcodesInput {
  create: UserCreateWithoutQrcodesInput
  update: UserUpdateWithoutQrcodesDataInput
  upsert: UserUpsertWithoutQrcodesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutReceivedConnectionsInput {
  create: UserCreateWithoutReceivedConnectionsInput
  update: UserUpdateWithoutReceivedConnectionsDataInput
  upsert: UserUpsertWithoutReceivedConnectionsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutSentConnectionsInput {
  create: UserCreateWithoutSentConnectionsInput
  update: UserUpdateWithoutSentConnectionsDataInput
  upsert: UserUpsertWithoutSentConnectionsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutProfileDataInput {
  authId: String
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  qrcodes: QRCodeUpdateManyWithoutUserInput
  sentConnections: ConnectionUpdateManyWithoutSenderInput
  receivedConnections: ConnectionUpdateManyWithoutReceiverInput
}

input UserUpdateWithoutQrcodesDataInput {
  authId: String
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldUpdateManyWithoutUserInput
  sentConnections: ConnectionUpdateManyWithoutSenderInput
  receivedConnections: ConnectionUpdateManyWithoutReceiverInput
}

input UserUpdateWithoutReceivedConnectionsDataInput {
  authId: String
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldUpdateManyWithoutUserInput
  qrcodes: QRCodeUpdateManyWithoutUserInput
  sentConnections: ConnectionUpdateManyWithoutSenderInput
}

input UserUpdateWithoutSentConnectionsDataInput {
  authId: String
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldUpdateManyWithoutUserInput
  qrcodes: QRCodeUpdateManyWithoutUserInput
  receivedConnections: ConnectionUpdateManyWithoutReceiverInput
}

input UserUpsertWithoutProfileInput {
  update: UserUpdateWithoutProfileDataInput!
  create: UserCreateWithoutProfileInput!
}

input UserUpsertWithoutQrcodesInput {
  update: UserUpdateWithoutQrcodesDataInput!
  create: UserCreateWithoutQrcodesInput!
}

input UserUpsertWithoutReceivedConnectionsInput {
  update: UserUpdateWithoutReceivedConnectionsDataInput!
  create: UserCreateWithoutReceivedConnectionsInput!
}

input UserUpsertWithoutSentConnectionsInput {
  update: UserUpdateWithoutSentConnectionsDataInput!
  create: UserCreateWithoutSentConnectionsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  authId: String
  authId_not: String
  authId_in: [String!]
  authId_not_in: [String!]
  authId_lt: String
  authId_lte: String
  authId_gt: String
  authId_gte: String
  authId_contains: String
  authId_not_contains: String
  authId_starts_with: String
  authId_not_starts_with: String
  authId_ends_with: String
  authId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  birthdate: String
  birthdate_not: String
  birthdate_in: [String!]
  birthdate_not_in: [String!]
  birthdate_lt: String
  birthdate_lte: String
  birthdate_gt: String
  birthdate_gte: String
  birthdate_contains: String
  birthdate_not_contains: String
  birthdate_starts_with: String
  birthdate_not_starts_with: String
  birthdate_ends_with: String
  birthdate_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  industry: String
  industry_not: String
  industry_in: [String!]
  industry_not_in: [String!]
  industry_lt: String
  industry_lte: String
  industry_gt: String
  industry_gte: String
  industry_contains: String
  industry_not_contains: String
  industry_starts_with: String
  industry_not_starts_with: String
  industry_ends_with: String
  industry_not_ends_with: String
  jobtitle: String
  jobtitle_not: String
  jobtitle_in: [String!]
  jobtitle_not_in: [String!]
  jobtitle_lt: String
  jobtitle_lte: String
  jobtitle_gt: String
  jobtitle_gte: String
  jobtitle_contains: String
  jobtitle_not_contains: String
  jobtitle_starts_with: String
  jobtitle_not_starts_with: String
  jobtitle_ends_with: String
  jobtitle_not_ends_with: String
  tagline: String
  tagline_not: String
  tagline_in: [String!]
  tagline_not_in: [String!]
  tagline_lt: String
  tagline_lte: String
  tagline_gt: String
  tagline_gte: String
  tagline_contains: String
  tagline_not_contains: String
  tagline_starts_with: String
  tagline_not_starts_with: String
  tagline_ends_with: String
  tagline_not_ends_with: String
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  profile_every: ProfileFieldWhereInput
  profile_some: ProfileFieldWhereInput
  profile_none: ProfileFieldWhereInput
  qrcodes_every: QRCodeWhereInput
  qrcodes_some: QRCodeWhereInput
  qrcodes_none: QRCodeWhereInput
  sentConnections_every: ConnectionWhereInput
  sentConnections_some: ConnectionWhereInput
  sentConnections_none: ConnectionWhereInput
  receivedConnections_every: ConnectionWhereInput
  receivedConnections_some: ConnectionWhereInput
  receivedConnections_none: ConnectionWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  authId: String
}
`
      }
    