module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateProfileField {
  count: Int!
}

type AggregateRequest {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createProfileField(data: ProfileFieldCreateInput!): ProfileField!
  updateProfileField(data: ProfileFieldUpdateInput!, where: ProfileFieldWhereUniqueInput!): ProfileField
  updateManyProfileFields(data: ProfileFieldUpdateManyMutationInput!, where: ProfileFieldWhereInput): BatchPayload!
  upsertProfileField(where: ProfileFieldWhereUniqueInput!, create: ProfileFieldCreateInput!, update: ProfileFieldUpdateInput!): ProfileField!
  deleteProfileField(where: ProfileFieldWhereUniqueInput!): ProfileField
  deleteManyProfileFields(where: ProfileFieldWhereInput): BatchPayload!
  createRequest(data: RequestCreateInput!): Request!
  updateRequest(data: RequestUpdateInput!, where: RequestWhereUniqueInput!): Request
  upsertRequest(where: RequestWhereUniqueInput!, create: RequestCreateInput!, update: RequestUpdateInput!): Request!
  deleteRequest(where: RequestWhereUniqueInput!): Request
  deleteManyRequests(where: RequestWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ProfileField {
  id: ID!
  user: User!
  value: String!
  type: ProfileFieldType!
  privacy: ProfileFieldPrivacy!
  preferredContact: Boolean
}

type ProfileFieldConnection {
  pageInfo: PageInfo!
  edges: [ProfileFieldEdge]!
  aggregate: AggregateProfileField!
}

input ProfileFieldCreateInput {
  id: ID
  user: UserCreateOneWithoutProfileInput!
  value: String!
  type: ProfileFieldType!
  privacy: ProfileFieldPrivacy!
  preferredContact: Boolean
}

input ProfileFieldCreateManyWithoutUserInput {
  create: [ProfileFieldCreateWithoutUserInput!]
  connect: [ProfileFieldWhereUniqueInput!]
}

input ProfileFieldCreateWithoutUserInput {
  id: ID
  value: String!
  type: ProfileFieldType!
  privacy: ProfileFieldPrivacy!
  preferredContact: Boolean
}

type ProfileFieldEdge {
  node: ProfileField!
  cursor: String!
}

enum ProfileFieldOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
  type_ASC
  type_DESC
  privacy_ASC
  privacy_DESC
  preferredContact_ASC
  preferredContact_DESC
}

type ProfileFieldPreviousValues {
  id: ID!
  value: String!
  type: ProfileFieldType!
  privacy: ProfileFieldPrivacy!
  preferredContact: Boolean
}

enum ProfileFieldPrivacy {
  PUBLIC
  PRIVATE
  CONNECTED
}

input ProfileFieldScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  type: ProfileFieldType
  type_not: ProfileFieldType
  type_in: [ProfileFieldType!]
  type_not_in: [ProfileFieldType!]
  privacy: ProfileFieldPrivacy
  privacy_not: ProfileFieldPrivacy
  privacy_in: [ProfileFieldPrivacy!]
  privacy_not_in: [ProfileFieldPrivacy!]
  preferredContact: Boolean
  preferredContact_not: Boolean
  AND: [ProfileFieldScalarWhereInput!]
  OR: [ProfileFieldScalarWhereInput!]
  NOT: [ProfileFieldScalarWhereInput!]
}

type ProfileFieldSubscriptionPayload {
  mutation: MutationType!
  node: ProfileField
  updatedFields: [String!]
  previousValues: ProfileFieldPreviousValues
}

input ProfileFieldSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProfileFieldWhereInput
  AND: [ProfileFieldSubscriptionWhereInput!]
  OR: [ProfileFieldSubscriptionWhereInput!]
  NOT: [ProfileFieldSubscriptionWhereInput!]
}

enum ProfileFieldType {
  EMAIL
  PHONE
  SMS
  INSTAGRAM
  FACEBOOK
  LINKEDIN
  TWITTER
}

input ProfileFieldUpdateInput {
  user: UserUpdateOneRequiredWithoutProfileInput
  value: String
  type: ProfileFieldType
  privacy: ProfileFieldPrivacy
  preferredContact: Boolean
}

input ProfileFieldUpdateManyDataInput {
  value: String
  type: ProfileFieldType
  privacy: ProfileFieldPrivacy
  preferredContact: Boolean
}

input ProfileFieldUpdateManyMutationInput {
  value: String
  type: ProfileFieldType
  privacy: ProfileFieldPrivacy
  preferredContact: Boolean
}

input ProfileFieldUpdateManyWithoutUserInput {
  create: [ProfileFieldCreateWithoutUserInput!]
  delete: [ProfileFieldWhereUniqueInput!]
  connect: [ProfileFieldWhereUniqueInput!]
  set: [ProfileFieldWhereUniqueInput!]
  disconnect: [ProfileFieldWhereUniqueInput!]
  update: [ProfileFieldUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ProfileFieldUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ProfileFieldScalarWhereInput!]
  updateMany: [ProfileFieldUpdateManyWithWhereNestedInput!]
}

input ProfileFieldUpdateManyWithWhereNestedInput {
  where: ProfileFieldScalarWhereInput!
  data: ProfileFieldUpdateManyDataInput!
}

input ProfileFieldUpdateWithoutUserDataInput {
  value: String
  type: ProfileFieldType
  privacy: ProfileFieldPrivacy
  preferredContact: Boolean
}

input ProfileFieldUpdateWithWhereUniqueWithoutUserInput {
  where: ProfileFieldWhereUniqueInput!
  data: ProfileFieldUpdateWithoutUserDataInput!
}

input ProfileFieldUpsertWithWhereUniqueWithoutUserInput {
  where: ProfileFieldWhereUniqueInput!
  update: ProfileFieldUpdateWithoutUserDataInput!
  create: ProfileFieldCreateWithoutUserInput!
}

input ProfileFieldWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  type: ProfileFieldType
  type_not: ProfileFieldType
  type_in: [ProfileFieldType!]
  type_not_in: [ProfileFieldType!]
  privacy: ProfileFieldPrivacy
  privacy_not: ProfileFieldPrivacy
  privacy_in: [ProfileFieldPrivacy!]
  privacy_not_in: [ProfileFieldPrivacy!]
  preferredContact: Boolean
  preferredContact_not: Boolean
  AND: [ProfileFieldWhereInput!]
  OR: [ProfileFieldWhereInput!]
  NOT: [ProfileFieldWhereInput!]
}

input ProfileFieldWhereUniqueInput {
  id: ID
}

type Query {
  profileField(where: ProfileFieldWhereUniqueInput!): ProfileField
  profileFields(where: ProfileFieldWhereInput, orderBy: ProfileFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProfileField]!
  profileFieldsConnection(where: ProfileFieldWhereInput, orderBy: ProfileFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileFieldConnection!
  request(where: RequestWhereUniqueInput!): Request
  requests(where: RequestWhereInput, orderBy: RequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Request]!
  requestsConnection(where: RequestWhereInput, orderBy: RequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RequestConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Request {
  id: ID!
  sender: User!
  recipient: User!
}

type RequestConnection {
  pageInfo: PageInfo!
  edges: [RequestEdge]!
  aggregate: AggregateRequest!
}

input RequestCreateInput {
  id: ID
  sender: UserCreateOneWithoutSentRequestsInput!
  recipient: UserCreateOneWithoutRecievedRequestsInput!
}

input RequestCreateManyWithoutRecipientInput {
  create: [RequestCreateWithoutRecipientInput!]
  connect: [RequestWhereUniqueInput!]
}

input RequestCreateManyWithoutSenderInput {
  create: [RequestCreateWithoutSenderInput!]
  connect: [RequestWhereUniqueInput!]
}

input RequestCreateWithoutRecipientInput {
  id: ID
  sender: UserCreateOneWithoutSentRequestsInput!
}

input RequestCreateWithoutSenderInput {
  id: ID
  recipient: UserCreateOneWithoutRecievedRequestsInput!
}

type RequestEdge {
  node: Request!
  cursor: String!
}

enum RequestOrderByInput {
  id_ASC
  id_DESC
}

type RequestPreviousValues {
  id: ID!
}

input RequestScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [RequestScalarWhereInput!]
  OR: [RequestScalarWhereInput!]
  NOT: [RequestScalarWhereInput!]
}

type RequestSubscriptionPayload {
  mutation: MutationType!
  node: Request
  updatedFields: [String!]
  previousValues: RequestPreviousValues
}

input RequestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RequestWhereInput
  AND: [RequestSubscriptionWhereInput!]
  OR: [RequestSubscriptionWhereInput!]
  NOT: [RequestSubscriptionWhereInput!]
}

input RequestUpdateInput {
  sender: UserUpdateOneRequiredWithoutSentRequestsInput
  recipient: UserUpdateOneRequiredWithoutRecievedRequestsInput
}

input RequestUpdateManyWithoutRecipientInput {
  create: [RequestCreateWithoutRecipientInput!]
  delete: [RequestWhereUniqueInput!]
  connect: [RequestWhereUniqueInput!]
  set: [RequestWhereUniqueInput!]
  disconnect: [RequestWhereUniqueInput!]
  update: [RequestUpdateWithWhereUniqueWithoutRecipientInput!]
  upsert: [RequestUpsertWithWhereUniqueWithoutRecipientInput!]
  deleteMany: [RequestScalarWhereInput!]
}

input RequestUpdateManyWithoutSenderInput {
  create: [RequestCreateWithoutSenderInput!]
  delete: [RequestWhereUniqueInput!]
  connect: [RequestWhereUniqueInput!]
  set: [RequestWhereUniqueInput!]
  disconnect: [RequestWhereUniqueInput!]
  update: [RequestUpdateWithWhereUniqueWithoutSenderInput!]
  upsert: [RequestUpsertWithWhereUniqueWithoutSenderInput!]
  deleteMany: [RequestScalarWhereInput!]
}

input RequestUpdateWithoutRecipientDataInput {
  sender: UserUpdateOneRequiredWithoutSentRequestsInput
}

input RequestUpdateWithoutSenderDataInput {
  recipient: UserUpdateOneRequiredWithoutRecievedRequestsInput
}

input RequestUpdateWithWhereUniqueWithoutRecipientInput {
  where: RequestWhereUniqueInput!
  data: RequestUpdateWithoutRecipientDataInput!
}

input RequestUpdateWithWhereUniqueWithoutSenderInput {
  where: RequestWhereUniqueInput!
  data: RequestUpdateWithoutSenderDataInput!
}

input RequestUpsertWithWhereUniqueWithoutRecipientInput {
  where: RequestWhereUniqueInput!
  update: RequestUpdateWithoutRecipientDataInput!
  create: RequestCreateWithoutRecipientInput!
}

input RequestUpsertWithWhereUniqueWithoutSenderInput {
  where: RequestWhereUniqueInput!
  update: RequestUpdateWithoutSenderDataInput!
  create: RequestCreateWithoutSenderInput!
}

input RequestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sender: UserWhereInput
  recipient: UserWhereInput
  AND: [RequestWhereInput!]
  OR: [RequestWhereInput!]
  NOT: [RequestWhereInput!]
}

input RequestWhereUniqueInput {
  id: ID
}

type Subscription {
  profileField(where: ProfileFieldSubscriptionWhereInput): ProfileFieldSubscriptionPayload
  request(where: RequestSubscriptionWhereInput): RequestSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  bio: String
  profile(where: ProfileFieldWhereInput, orderBy: ProfileFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProfileField!]
  recievedRequests(where: RequestWhereInput, orderBy: RequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Request!]
  sentRequests(where: RequestWhereInput, orderBy: RequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Request!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  bio: String
  profile: ProfileFieldCreateManyWithoutUserInput
  recievedRequests: RequestCreateManyWithoutRecipientInput
  sentRequests: RequestCreateManyWithoutSenderInput
}

input UserCreateOneWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRecievedRequestsInput {
  create: UserCreateWithoutRecievedRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSentRequestsInput {
  create: UserCreateWithoutSentRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProfileInput {
  id: ID
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  bio: String
  recievedRequests: RequestCreateManyWithoutRecipientInput
  sentRequests: RequestCreateManyWithoutSenderInput
}

input UserCreateWithoutRecievedRequestsInput {
  id: ID
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  bio: String
  profile: ProfileFieldCreateManyWithoutUserInput
  sentRequests: RequestCreateManyWithoutSenderInput
}

input UserCreateWithoutSentRequestsInput {
  id: ID
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  bio: String
  profile: ProfileFieldCreateManyWithoutUserInput
  recievedRequests: RequestCreateManyWithoutRecipientInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  authId_ASC
  authId_DESC
  name_ASC
  name_DESC
  picture_ASC
  picture_DESC
  birthdate_ASC
  birthdate_DESC
  location_ASC
  location_DESC
  industry_ASC
  industry_DESC
  jobtitle_ASC
  jobtitle_DESC
  bio_ASC
  bio_DESC
}

type UserPreviousValues {
  id: ID!
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  bio: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  authId: String
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  bio: String
  profile: ProfileFieldUpdateManyWithoutUserInput
  recievedRequests: RequestUpdateManyWithoutRecipientInput
  sentRequests: RequestUpdateManyWithoutSenderInput
}

input UserUpdateManyMutationInput {
  authId: String
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  bio: String
}

input UserUpdateOneRequiredWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  update: UserUpdateWithoutProfileDataInput
  upsert: UserUpsertWithoutProfileInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutRecievedRequestsInput {
  create: UserCreateWithoutRecievedRequestsInput
  update: UserUpdateWithoutRecievedRequestsDataInput
  upsert: UserUpsertWithoutRecievedRequestsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutSentRequestsInput {
  create: UserCreateWithoutSentRequestsInput
  update: UserUpdateWithoutSentRequestsDataInput
  upsert: UserUpsertWithoutSentRequestsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutProfileDataInput {
  authId: String
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  bio: String
  recievedRequests: RequestUpdateManyWithoutRecipientInput
  sentRequests: RequestUpdateManyWithoutSenderInput
}

input UserUpdateWithoutRecievedRequestsDataInput {
  authId: String
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  bio: String
  profile: ProfileFieldUpdateManyWithoutUserInput
  sentRequests: RequestUpdateManyWithoutSenderInput
}

input UserUpdateWithoutSentRequestsDataInput {
  authId: String
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  bio: String
  profile: ProfileFieldUpdateManyWithoutUserInput
  recievedRequests: RequestUpdateManyWithoutRecipientInput
}

input UserUpsertWithoutProfileInput {
  update: UserUpdateWithoutProfileDataInput!
  create: UserCreateWithoutProfileInput!
}

input UserUpsertWithoutRecievedRequestsInput {
  update: UserUpdateWithoutRecievedRequestsDataInput!
  create: UserCreateWithoutRecievedRequestsInput!
}

input UserUpsertWithoutSentRequestsInput {
  update: UserUpdateWithoutSentRequestsDataInput!
  create: UserCreateWithoutSentRequestsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  authId: String
  authId_not: String
  authId_in: [String!]
  authId_not_in: [String!]
  authId_lt: String
  authId_lte: String
  authId_gt: String
  authId_gte: String
  authId_contains: String
  authId_not_contains: String
  authId_starts_with: String
  authId_not_starts_with: String
  authId_ends_with: String
  authId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  birthdate: String
  birthdate_not: String
  birthdate_in: [String!]
  birthdate_not_in: [String!]
  birthdate_lt: String
  birthdate_lte: String
  birthdate_gt: String
  birthdate_gte: String
  birthdate_contains: String
  birthdate_not_contains: String
  birthdate_starts_with: String
  birthdate_not_starts_with: String
  birthdate_ends_with: String
  birthdate_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  industry: String
  industry_not: String
  industry_in: [String!]
  industry_not_in: [String!]
  industry_lt: String
  industry_lte: String
  industry_gt: String
  industry_gte: String
  industry_contains: String
  industry_not_contains: String
  industry_starts_with: String
  industry_not_starts_with: String
  industry_ends_with: String
  industry_not_ends_with: String
  jobtitle: String
  jobtitle_not: String
  jobtitle_in: [String!]
  jobtitle_not_in: [String!]
  jobtitle_lt: String
  jobtitle_lte: String
  jobtitle_gt: String
  jobtitle_gte: String
  jobtitle_contains: String
  jobtitle_not_contains: String
  jobtitle_starts_with: String
  jobtitle_not_starts_with: String
  jobtitle_ends_with: String
  jobtitle_not_ends_with: String
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  profile_every: ProfileFieldWhereInput
  profile_some: ProfileFieldWhereInput
  profile_none: ProfileFieldWhereInput
  recievedRequests_every: RequestWhereInput
  recievedRequests_some: RequestWhereInput
  recievedRequests_none: RequestWhereInput
  sentRequests_every: RequestWhereInput
  sentRequests_some: RequestWhereInput
  sentRequests_none: RequestWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  authId: String
}
`
      }
    